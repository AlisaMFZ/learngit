{"version":3,"sources":["ajv.js"],"names":[],"mappings":"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","file":"ajv-compiled.js","sourcesContent":["'use strict';\n\nvar compileSchema = require('./compile')\n  , resolve = require('./compile/resolve')\n  , Cache = require('./cache')\n  , SchemaObject = require('./compile/schema_obj')\n  , stableStringify = require('json-stable-stringify')\n  , formats = require('./compile/formats')\n  , rules = require('./compile/rules')\n  , v5 = require('./v5')\n  , util = require('./compile/util')\n  , async = require('./async')\n  , co = require('co');\n\nmodule.exports = Ajv;\n\nAjv.prototype.compileAsync = async.compile;\n\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\nAjv.ValidationError = require('./compile/validation_error');\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-04/schema';\nvar SCHEMA_URI_FORMAT = /^(?:(?:[a-z][a-z0-9+-.]*:)?\\/\\/)?[^\\s]*$/i;\nfunction SCHEMA_URI_FORMAT_FUNC(str) {\n  return SCHEMA_URI_FORMAT.test(str);\n}\n\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes' ];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  var self = this;\n\n  opts = this._opts = util.copy(opts) || {};\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n  this._cache = opts.cache || new Cache;\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n\n  // this is done on purpose, so that methods are bound to the instance\n  // (without using bind) so that they can be used without the instance\n  this.validate = validate;\n  this.compile = compile;\n  this.addSchema = addSchema;\n  this.addMetaSchema = addMetaSchema;\n  this.validateSchema = validateSchema;\n  this.getSchema = getSchema;\n  this.removeSchema = removeSchema;\n  this.addFormat = addFormat;\n  this.errorsText = errorsText;\n\n  this._addSchema = _addSchema;\n  this._compile = _compile;\n\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.async || opts.transpile) async.setup(opts);\n  if (opts.beautify === true) opts.beautify = { indent_size: 2 };\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  this._metaOpts = getMetaSchemaOptions();\n\n  if (opts.formats) addInitialFormats();\n  addDraft4MetaSchema();\n  if (opts.v5) v5.enable(this);\n  if (typeof opts.meta == 'object') addMetaSchema(opts.meta);\n  addInitialSchemas();\n\n\n  /**\n   * Validate data using schema\n   * Schema will be compiled and cached (using serialized JSON as key. [json-stable-stringify](https://github.com/substack/json-stable-stringify) is used to serialize.\n   * @param  {String|Object} schemaKeyRef key, ref or schema object\n   * @param  {Any} data to be validated\n   * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n   */\n  function validate(schemaKeyRef, data) {\n    var v;\n    if (typeof schemaKeyRef == 'string') {\n      v = getSchema(schemaKeyRef);\n      if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n    } else {\n      var schemaObj = _addSchema(schemaKeyRef);\n      v = schemaObj.validate || _compile(schemaObj);\n    }\n\n    var valid = v(data);\n    if (v.$async === true)\n      return self._opts.async == '*' ? co(valid) : valid;\n    self.errors = v.errors;\n    return valid;\n  }\n\n\n  /**\n   * Create validating function for passed schema.\n   * @param  {Object} schema schema object\n   * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n   * @return {Function} validating function\n   */\n  function compile(schema, _meta) {\n    var schemaObj = _addSchema(schema, undefined, _meta);\n    return schemaObj.validate || _compile(schemaObj);\n  }\n\n\n  /**\n   * Adds schema to the instance.\n   * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n   * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n   * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n   * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n   */\n  function addSchema(schema, key, _skipValidation, _meta) {\n    if (Array.isArray(schema)){\n      for (var i=0; i<schema.length; i++) addSchema(schema[i], undefined, _skipValidation, _meta);\n      return;\n    }\n    // can key/id have # inside?\n    key = resolve.normalizeId(key || schema.id);\n    checkUnique(key);\n    self._schemas[key] = _addSchema(schema, _skipValidation, _meta, true);\n  }\n\n\n  /**\n   * Add schema that will be used to validate other schemas\n   * options in META_IGNORE_OPTIONS are alway set to false\n   * @param {Object} schema schema object\n   * @param {String} key optional schema key\n   * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n   */\n  function addMetaSchema(schema, key, skipValidation) {\n    addSchema(schema, key, skipValidation, true);\n  }\n\n\n  /**\n   * Validate schema\n   * @param {Object} schema schema to validate\n   * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n   * @return {Boolean} true if schema is valid\n   */\n  function validateSchema(schema, throwOrLogError) {\n    var $schema = schema.$schema || self._opts.defaultMeta || defaultMeta();\n    var currentUriFormat = self._formats.uri;\n    self._formats.uri = typeof currentUriFormat == 'function'\n                        ? SCHEMA_URI_FORMAT_FUNC\n                        : SCHEMA_URI_FORMAT;\n    var valid;\n    try { valid = validate($schema, schema); }\n    finally { self._formats.uri = currentUriFormat; }\n    if (!valid && throwOrLogError) {\n      var message = 'schema is invalid: ' + errorsText();\n      if (self._opts.validateSchema == 'log') console.error(message);\n      else throw new Error(message);\n    }\n    return valid;\n  }\n\n\n  function defaultMeta() {\n    var meta = self._opts.meta;\n    self._opts.defaultMeta = typeof meta == 'object'\n                              ? meta.id || meta\n                              : self._opts.v5\n                                ? v5.META_SCHEMA_ID\n                                : META_SCHEMA_ID;\n    return self._opts.defaultMeta;\n  }\n\n\n  /**\n   * Get compiled schema from the instance by `key` or `ref`.\n   * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n   * @return {Function} schema validating function (with property `schema`).\n   */\n  function getSchema(keyRef) {\n    var schemaObj = _getSchemaObj(keyRef);\n    switch (typeof schemaObj) {\n      case 'object': return schemaObj.validate || _compile(schemaObj);\n      case 'string': return getSchema(schemaObj);\n      case 'undefined': return _getSchemaFragment(keyRef);\n    }\n  }\n\n\n  function _getSchemaFragment(ref) {\n    var res = resolve.schema.call(self, { schema: {} }, ref);\n    if (res) {\n      var schema = res.schema\n        , root = res.root\n        , baseId = res.baseId;\n      var v = compileSchema.call(self, schema, root, undefined, baseId);\n      self._fragments[ref] = new SchemaObject({\n        ref: ref,\n        fragment: true,\n        schema: schema,\n        root: root,\n        baseId: baseId,\n        validate: v\n      });\n      return v;\n    }\n  }\n\n\n  function _getSchemaObj(keyRef) {\n    keyRef = resolve.normalizeId(keyRef);\n    return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n  }\n\n\n  /**\n   * Remove cached schema(s).\n   * If no parameter is passed all schemas but meta-schemas are removed.\n   * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n   * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n   * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n   */\n  function removeSchema(schemaKeyRef) {\n    if (schemaKeyRef instanceof RegExp) {\n      _removeAllSchemas(self._schemas, schemaKeyRef);\n      _removeAllSchemas(self._refs, schemaKeyRef);\n      return;\n    }\n    switch (typeof schemaKeyRef) {\n      case 'undefined':\n        _removeAllSchemas(self._schemas);\n        _removeAllSchemas(self._refs);\n        self._cache.clear();\n        return;\n      case 'string':\n        var schemaObj = _getSchemaObj(schemaKeyRef);\n        if (schemaObj) self._cache.del(schemaObj.jsonStr);\n        delete self._schemas[schemaKeyRef];\n        delete self._refs[schemaKeyRef];\n        return;\n      case 'object':\n        var jsonStr = stableStringify(schemaKeyRef);\n        self._cache.del(jsonStr);\n        var id = schemaKeyRef.id;\n        if (id) {\n          id = resolve.normalizeId(id);\n          delete self._schemas[id];\n          delete self._refs[id];\n        }\n    }\n  }\n\n\n  function _removeAllSchemas(schemas, regex) {\n    for (var keyRef in schemas) {\n      var schemaObj = schemas[keyRef];\n      if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n        self._cache.del(schemaObj.jsonStr);\n        delete schemas[keyRef];\n      }\n    }\n  }\n\n\n  function _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n    if (typeof schema != 'object') throw new Error('schema should be object');\n    var jsonStr = stableStringify(schema);\n    var cached = self._cache.get(jsonStr);\n    if (cached) return cached;\n\n    shouldAddSchema = shouldAddSchema || self._opts.addUsedSchema !== false;\n\n    var id = resolve.normalizeId(schema.id);\n    if (id && shouldAddSchema) checkUnique(id);\n\n    var willValidate = self._opts.validateSchema !== false && !skipValidation;\n    var recursiveMeta;\n    if (willValidate && !(recursiveMeta = schema.id && schema.id == schema.$schema))\n      validateSchema(schema, true);\n\n    var localRefs = resolve.ids.call(self, schema);\n\n    var schemaObj = new SchemaObject({\n      id: id,\n      schema: schema,\n      localRefs: localRefs,\n      jsonStr: jsonStr,\n      meta: meta\n    });\n\n    if (id[0] != '#' && shouldAddSchema) self._refs[id] = schemaObj;\n    self._cache.put(jsonStr, schemaObj);\n\n    if (willValidate && recursiveMeta) validateSchema(schema, true);\n\n    return schemaObj;\n  }\n\n\n  function _compile(schemaObj, root) {\n    if (schemaObj.compiling) {\n      schemaObj.validate = callValidate;\n      callValidate.schema = schemaObj.schema;\n      callValidate.errors = null;\n      callValidate.root = root ? root : callValidate;\n      if (schemaObj.schema.$async === true)\n        callValidate.$async = true;\n      return callValidate;\n    }\n    schemaObj.compiling = true;\n\n    var currentOpts;\n    if (schemaObj.meta) {\n      currentOpts = self._opts;\n      self._opts = self._metaOpts;\n    }\n\n    var v;\n    try { v = compileSchema.call(self, schemaObj.schema, root, schemaObj.localRefs); }\n    finally {\n      schemaObj.compiling = false;\n      if (schemaObj.meta) self._opts = currentOpts;\n    }\n\n    schemaObj.validate = v;\n    schemaObj.refs = v.refs;\n    schemaObj.refVal = v.refVal;\n    schemaObj.root = v.root;\n    return v;\n\n\n    function callValidate() {\n      var _validate = schemaObj.validate;\n      var result = _validate.apply(null, arguments);\n      callValidate.errors = _validate.errors;\n      return result;\n    }\n  }\n\n\n  /**\n   * Convert array of error message objects to string\n   * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n   * @param  {Object} options optional options with properties `separator` and `dataVar`.\n   * @return {String} human readable string with all errors descriptions\n   */\n  function errorsText(errors, options) {\n    errors = errors || self.errors;\n    if (!errors) return 'No errors';\n    options = options || {};\n    var separator = options.separator === undefined ? ', ' : options.separator;\n    var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n    var text = '';\n    for (var i=0; i<errors.length; i++) {\n      var e = errors[i];\n      if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n    }\n    return text.slice(0, -separator.length);\n  }\n\n\n  /**\n   * Add custom format\n   * @param {String} name format name\n   * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n   */\n  function addFormat(name, format) {\n    if (typeof format == 'string') format = new RegExp(format);\n    self._formats[name] = format;\n  }\n\n\n  function addDraft4MetaSchema() {\n    if (self._opts.meta !== false) {\n      var metaSchema = require('./refs/json-schema-draft-04.json');\n      addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n      self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n    }\n  }\n\n\n  function addInitialSchemas() {\n    var optsSchemas = self._opts.schemas;\n    if (!optsSchemas) return;\n    if (Array.isArray(optsSchemas)) addSchema(optsSchemas);\n    else for (var key in optsSchemas) addSchema(optsSchemas[key], key);\n  }\n\n\n  function addInitialFormats() {\n    for (var name in self._opts.formats) {\n      var format = self._opts.formats[name];\n      addFormat(name, format);\n    }\n  }\n\n\n  function checkUnique(id) {\n    if (self._schemas[id] || self._refs[id])\n      throw new Error('schema with key or id \"' + id + '\" already exists');\n  }\n\n\n  function getMetaSchemaOptions() {\n    var metaOpts = util.copy(self._opts);\n    for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n      delete metaOpts[META_IGNORE_OPTIONS[i]];\n    return metaOpts;\n  }\n}\n"]}