{"version":3,"sources":["resolve.js"],"names":[],"mappings":"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","file":"resolve-compiled.js","sourcesContent":["'use strict';\n\nvar url = require('url')\n  , equal = require('./equal')\n  , util = require('./util')\n  , SchemaObject = require('./schema_obj');\n\nmodule.exports = resolve;\n\nresolve.normalizeId = normalizeId;\nresolve.fullPath = getFullPath;\nresolve.url = resolveUrl;\nresolve.ids = resolveIds;\nresolve.inlineRef = inlineRef;\nresolve.schema = resolveSchema;\n\n/**\n * [resolve and compile the references ($ref)]\n * @this   Ajv\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\n * @param  {Object} root object with information about the root schema for the current schema\n * @param  {String} ref reference to resolve\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n */\nfunction resolve(compile, root, ref) {\n  /* jshint validthis: true */\n  var refVal = this._refs[ref];\n  if (typeof refVal == 'string') {\n    if (this._refs[refVal]) refVal = this._refs[refVal];\n    else return resolve.call(this, compile, root, refVal);\n  }\n\n  refVal = refVal || this._schemas[ref];\n  if (refVal instanceof SchemaObject) {\n    return inlineRef(refVal.schema, this._opts.inlineRefs)\n            ? refVal.schema\n            : refVal.validate || this._compile(refVal);\n  }\n\n  var res = resolveSchema.call(this, root, ref);\n  var schema, v, baseId;\n  if (res) {\n    schema = res.schema;\n    root = res.root;\n    baseId = res.baseId;\n  }\n\n  if (schema instanceof SchemaObject) {\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n  } else if (schema) {\n    v = inlineRef(schema, this._opts.inlineRefs)\n        ? schema\n        : compile.call(this, schema, root, undefined, baseId);\n  }\n\n  return v;\n}\n\n\n/**\n * Resolve schema, its root and baseId\n * @this Ajv\n * @param  {Object} root root object with properties schema, refVal, refs\n * @param  {String} ref  reference to resolve\n * @return {Object} object with properties schema, root, baseId\n */\nfunction resolveSchema(root, ref) {\n  /* jshint validthis: true */\n  var p = url.parse(ref, false, true)\n    , refPath = _getFullPath(p)\n    , baseId = getFullPath(root.schema.id);\n  if (refPath !== baseId) {\n    var id = normalizeId(refPath);\n    var refVal = this._refs[id];\n    if (typeof refVal == 'string') {\n      return resolveRecursive.call(this, root, refVal, p);\n    } else if (refVal instanceof SchemaObject) {\n      if (!refVal.validate) this._compile(refVal);\n      root = refVal;\n    } else {\n      refVal = this._schemas[id];\n      if (refVal instanceof SchemaObject) {\n        if (!refVal.validate) this._compile(refVal);\n        if (id == normalizeId(ref))\n          return { schema: refVal, root: root, baseId: baseId };\n        root = refVal;\n      } else {\n        return;\n      }\n    }\n    if (!root.schema) return;\n    baseId = getFullPath(root.schema.id);\n  }\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\n}\n\n\n/* @this Ajv */\nfunction resolveRecursive(root, ref, parsedRef) {\n  /* jshint validthis: true */\n  var res = resolveSchema.call(this, root, ref);\n  if (res) {\n    var schema = res.schema;\n    var baseId = res.baseId;\n    root = res.root;\n    if (schema.id) baseId = resolveUrl(baseId, schema.id);\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n  }\n}\n\n\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n/* @this Ajv */\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\n  /* jshint validthis: true */\n  parsedRef.hash = parsedRef.hash || '';\n  if (parsedRef.hash.slice(0,2) != '#/') return;\n  var parts = parsedRef.hash.split('/');\n\n  for (var i = 1; i < parts.length; i++) {\n    var part = parts[i];\n    if (part) {\n      part = util.unescapeFragment(part);\n      schema = schema[part];\n      if (!schema) break;\n      if (schema.id && !PREVENT_SCOPE_CHANGE[part]) baseId = resolveUrl(baseId, schema.id);\n      if (schema.$ref) {\n        var $ref = resolveUrl(baseId, schema.$ref);\n        var res = resolveSchema.call(this, root, $ref);\n        if (res) {\n          schema = res.schema;\n          root = res.root;\n          baseId = res.baseId;\n        }\n      }\n    }\n  }\n  if (schema && schema != root.schema)\n    return { schema: schema, root: root, baseId: baseId };\n}\n\n\nvar SIMPLE_INLINED = util.toHash([\n  'type', 'format', 'pattern',\n  'maxLength', 'minLength',\n  'maxProperties', 'minProperties',\n  'maxItems', 'minItems',\n  'maximum', 'minimum',\n  'uniqueItems', 'multipleOf',\n  'required', 'enum'\n]);\nfunction inlineRef(schema, limit) {\n  if (limit === false) return false;\n  if (limit === undefined || limit === true) return checkNoRef(schema);\n  else if (limit) return countKeys(schema) <= limit;\n}\n\n\nfunction checkNoRef(schema) {\n  var item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return false;\n      item = schema[key];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  }\n  return true;\n}\n\n\nfunction countKeys(schema) {\n  var count = 0, item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object') count += countKeys(item);\n      if (count == Infinity) return Infinity;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return Infinity;\n      if (SIMPLE_INLINED[key]) {\n        count++;\n      } else {\n        item = schema[key];\n        if (typeof item == 'object') count += countKeys(item) + 1;\n        if (count == Infinity) return Infinity;\n      }\n    }\n  }\n  return count;\n}\n\n\nfunction getFullPath(id, normalize) {\n  if (normalize !== false) id = normalizeId(id);\n  var p = url.parse(id, false, true);\n  return _getFullPath(p);\n}\n\n\nfunction _getFullPath(p) {\n  var protocolSeparator = p.protocol || p.href.slice(0,2) == '//' ? '//' : '';\n  return (p.protocol||'') + protocolSeparator + (p.host||'') + (p.path||'')  + '#';\n}\n\n\nvar TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n}\n\n\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return url.resolve(baseId, id);\n}\n\n\n/* @this Ajv */\nfunction resolveIds(schema) {\n  /* eslint no-shadow: 0 */\n  /* jshint validthis: true */\n  var id = normalizeId(schema.id);\n  var localRefs = {};\n  _resolveIds.call(this, schema, getFullPath(id, false), id);\n  return localRefs;\n\n  /* @this Ajv */\n  function _resolveIds(schema, fullPath, baseId) {\n    /* jshint validthis: true */\n    if (Array.isArray(schema)) {\n      for (var i=0; i<schema.length; i++)\n        _resolveIds.call(this, schema[i], fullPath+'/'+i, baseId);\n    } else if (schema && typeof schema == 'object') {\n      if (typeof schema.id == 'string') {\n        var id = baseId = baseId\n                          ? url.resolve(baseId, schema.id)\n                          : schema.id;\n        id = normalizeId(id);\n\n        var refVal = this._refs[id];\n        if (typeof refVal == 'string') refVal = this._refs[refVal];\n        if (refVal && refVal.schema) {\n          if (!equal(schema, refVal.schema))\n            throw new Error('id \"' + id + '\" resolves to more than one schema');\n        } else if (id != normalizeId(fullPath)) {\n          if (id[0] == '#') {\n            if (localRefs[id] && !equal(schema, localRefs[id]))\n              throw new Error('id \"' + id + '\" resolves to more than one schema');\n            localRefs[id] = schema;\n          } else {\n            this._refs[id] = fullPath;\n          }\n        }\n      }\n      for (var key in schema)\n        _resolveIds.call(this, schema[key], fullPath+'/'+util.escapeFragment(key), baseId);\n    }\n  }\n}\n"]}