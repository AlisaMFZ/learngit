{"version":3,"sources":["patternRequired.js"],"names":[],"mappings":"AAAA;;AACA,OAAO,OAAP,GAAiB,SAAS,wBAAT,CAAkC,EAAlC,EAAsC,QAAtC,EAAgD;AAC/D,MAAI,MAAM,GAAV;AACA,MAAI,OAAO,GAAG,KAAd;AACA,MAAI,WAAW,GAAG,SAAlB;AACA,MAAI,UAAU,GAAG,MAAH,CAAU,QAAV,CAAd;AACA,MAAI,cAAc,GAAG,UAAH,GAAgB,GAAG,IAAH,CAAQ,WAAR,CAAoB,QAApB,CAAlC;AACA,MAAI,iBAAiB,GAAG,aAAH,GAAmB,GAAnB,GAAyB,QAA9C;AACA,MAAI,gBAAgB,CAAC,GAAG,IAAH,CAAQ,SAA7B;AACA,MAAI,aAAJ;AACA,MAAI,QAAQ,UAAU,YAAY,EAAtB,CAAZ;AACA,MAAI,SAAS,UAAU,IAAvB;AACA,MAAI,OAAO,QAAQ,IAAnB;AAAA,MACE,WAAW,mBAAmB,IADhC;AAAA,MAEE,iBAAiB,EAFnB;AAAA,MAGE,iBAAiB,GAAG,IAAH,CAAQ,aAH3B;AAIA,SAAO,SAAU,MAAV,GAAoB,UAA3B;AACA,MAAI,OAAO,OAAX;AACA,MAAI,IAAJ,EAAU;AACR,QAAI,UAAJ;AAAA,QAAgB,KAAK,CAAC,CAAtB;AAAA,QACE,KAAK,KAAK,MAAL,GAAc,CADrB;AAEA,WAAO,KAAK,EAAZ,EAAgB;AACd,mBAAa,KAAK,MAAM,CAAX,CAAb;AACA,aAAO,UAAW,QAAX,GAAuB,qBAAvB,GAAgD,IAAhD,GAAwD,MAAxD,GAAkE,KAAlE,GAA2E,OAAlF;AACA,UAAI,cAAJ,EAAoB;AAClB,eAAO,gDAAiD,KAAjD,GAA0D,IAA1D,GAAkE,IAAlE,GAA0E,eAAjF;AACD;AACD,aAAO,MAAO,QAAP,GAAmB,KAAnB,GAA4B,GAAG,UAAH,CAAc,UAAd,CAA5B,GAAyD,QAAzD,GAAqE,IAArE,GAA6E,SAA7E,GAA0F,QAA1F,GAAsG,aAA7G;AACA,UAAI,kBAAkB,GAAG,IAAH,CAAQ,YAAR,CAAqB,UAArB,CAAtB;AACA,aAAO,WAAY,QAAZ,GAAwB,MAAxB,GAAkC,MAAlC,GAA4C,yBAAnD,CARc,CAQgE;AAC9E,UAAI,GAAG,YAAH,KAAoB,KAAxB,EAA+B;AAC7B,eAAO,oBAAoB,iBAAiB,iBAArC,IAA0D,sCAA1D,GAAoG,GAAG,SAAvG,GAAoH,iBAApH,GAAyI,GAAG,IAAH,CAAQ,cAAR,CAAuB,cAAvB,CAAzI,GAAmL,iCAAnL,GAAwN,eAAxN,GAA2O,OAAlP;AACA,YAAI,GAAG,IAAH,CAAQ,QAAR,KAAqB,KAAzB,EAAgC;AAC9B,iBAAO,6DAA8D,eAA9D,GAAiF,SAAxF;AACD;AACD,YAAI,GAAG,IAAH,CAAQ,OAAZ,EAAqB;AACnB,iBAAO,+BAAgC,WAAhC,GAA+C,kCAA/C,GAAqF,GAAG,UAAxF,GAAsG,WAAtG,GAAqH,KAArH,GAA8H,GAArI;AACD;AACD,eAAO,KAAP;AACD,OATD,MASO;AACL,eAAO,MAAP;AACD;AACD,aAAO,kFAAP;AACA,UAAI,aAAJ,EAAmB;AACjB,0BAAkB,GAAlB;AACA,eAAO,UAAP;AACD;AACF;AACF;AACD,SAAO,KAAM,cAAb;AACA,SAAO,GAAP;AACD,CAlDD","file":"patternRequired-compiled.js","sourcesContent":["'use strict';\nmodule.exports = function generate_patternRequired(it, $keyword) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $key = 'key' + $lvl,\n    $matched = 'patternMatched' + $lvl,\n    $closingBraces = '',\n    $ownProperties = it.opts.ownProperties;\n  out += 'var ' + ($valid) + ' = true;';\n  var arr1 = $schema;\n  if (arr1) {\n    var $pProperty, i1 = -1,\n      l1 = arr1.length - 1;\n    while (i1 < l1) {\n      $pProperty = arr1[i1 += 1];\n      out += ' var ' + ($matched) + ' = false; for (var ' + ($key) + ' in ' + ($data) + ') {  ';\n      if ($ownProperties) {\n        out += ' if (!Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($key) + ')) continue; ';\n      }\n      out += ' ' + ($matched) + ' = ' + (it.usePattern($pProperty)) + '.test(' + ($key) + '); if (' + ($matched) + ') break; } ';\n      var $missingPattern = it.util.escapeQuotes($pProperty);\n      out += ' if (!' + ($matched) + ') { ' + ($valid) + ' = false;  var err =   '; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'patternRequired') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingPattern: \\'' + ($missingPattern) + '\\' } ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'should have property matching pattern \\\\\\'' + ($missingPattern) + '\\\\\\'\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; }   ';\n      if ($breakOnError) {\n        $closingBraces += '}';\n        out += ' else { ';\n      }\n    }\n  }\n  out += '' + ($closingBraces);\n  return out;\n}\n"]}