{"version":3,"sources":["keyword.js"],"names":[],"mappings":"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","file":"keyword-compiled.js","sourcesContent":["'use strict';\n\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$\\-]*$/i;\nvar customRuleCode = require('./dotjs/custom');\n\nmodule.exports = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword\n};\n\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n */\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n\n  if (RULES.keywords[keyword])\n    throw new Error('Keyword ' + keyword + ' is already defined');\n\n  if (!IDENTIFIER.test(keyword))\n    throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    if (definition.macro && definition.valid !== undefined)\n      throw new Error('\"valid\" option cannot be used with macro keywords');\n\n    var dataType = definition.type;\n    if (Array.isArray(dataType)) {\n      var i, len = dataType.length;\n      for (i=0; i<len; i++) checkDataType(dataType[i]);\n      for (i=0; i<len; i++) _addRule(keyword, dataType[i], definition);\n    } else {\n      if (dataType) checkDataType(dataType);\n      _addRule(keyword, dataType, definition);\n    }\n\n    var $data = definition.$data === true && this._opts.v5;\n    if ($data && !definition.validate)\n      throw new Error('$data support: \"validate\" function is not defined');\n\n    var metaSchema = definition.metaSchema;\n    if (metaSchema) {\n      if ($data) {\n        metaSchema = {\n          anyOf: [\n            metaSchema,\n            { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#/definitions/$data' }\n          ]\n        };\n      }\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n    for (var i=0; i<RULES.length; i++) {\n      var rg = RULES[i];\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = { type: dataType, rules: [] };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: customRuleCode\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n\n  function checkDataType(dataType) {\n    if (!RULES.types[dataType]) throw new Error('Unknown type ' + dataType);\n  }\n}\n\n\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n\n\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n */\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n  for (var i=0; i<RULES.length; i++) {\n    var rules = RULES[i].rules;\n    for (var j=0; j<rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n}\n"]}