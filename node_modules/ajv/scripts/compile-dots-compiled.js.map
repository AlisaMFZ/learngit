{"version":3,"sources":["compile-dots.js"],"names":[],"mappings":"AAAA;AACA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAX;AAAA,IACI,KAAK,QAAQ,IAAR,CADT;AAAA,IAEI,OAAO,QAAQ,MAAR,CAFX;AAAA,IAGI,MAAM,QAAQ,KAAR,CAHV;AAAA,IAII,WAAW,QAAQ,aAAR,EAAuB,WAJtC;;AAMA,IAAI,eAAe,QAAQ,IAAR,CAAa,CAAb,KAAmB,KAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,CAAtC;;AAEA,IAAI,OAAO,EAAX;AACA,IAAI,WAAW,KAAK,IAAL,CAAU,gBAAV,EAA4B,EAAE,KAAK,YAAP,EAA5B,CAAf;AACA,SAAS,OAAT,CAAiB,UAAU,CAAV,EAAa;AAC5B,MAAI,OAAO,KAAK,QAAL,CAAc,CAAd,EAAiB,MAAjB,CAAX;AACA,OAAK,IAAL,IAAa,GAAG,YAAH,CAAgB,KAAK,IAAL,CAAU,YAAV,EAAwB,CAAxB,CAAhB,CAAb;AACD,CAHD;;AAKA,IAAI,gBAAgB,QAAQ,IAAR,CAAa,CAAb,KAAmB,KAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,CAAvC;AACA,IAAI,QAAQ,KAAK,IAAL,CAAU,gBAAV,EAA4B,EAAE,KAAK,aAAP,EAA5B,CAAZ;;AAEA,IAAI,YAAY,KAAK,IAAL,CAAU,aAAV,EAAyB,SAAzB,CAAhB;AACA,IAAI;AAAE,KAAG,SAAH,CAAa,SAAb;AAA0B,CAAhC,CAAiC,OAAM,CAAN,EAAS,CAAE;;AAE5C,QAAQ,GAAR,CAAY,gBAAZ;;AAEA,IAAI,gBAAgB,wCAApB;AACA,IAAI,mBAAmB,qBAAvB;AACA,IAAI,WAAW,uBAAf;AACA,IAAI,OAAO,CACT,OADS,EACA,QADA,EACU,MADV,EACkB,OADlB,EAC2B,UAD3B,EAET,eAFS,EAEQ,gBAFR,EAE0B,aAF1B,CAAX;;AAKA,MAAM,OAAN,CAAc,UAAU,CAAV,EAAa;AACzB,MAAI,UAAU,KAAK,QAAL,CAAc,CAAd,EAAiB,MAAjB,CAAd;AACA,MAAI,aAAa,KAAK,IAAL,CAAU,SAAV,EAAqB,UAAU,KAA/B,CAAjB;AACA,MAAI,WAAW,GAAG,YAAH,CAAgB,KAAK,IAAL,CAAU,aAAV,EAAyB,CAAzB,CAAhB,CAAf;AACA,MAAI,OAAO,IAAI,OAAJ,CAAY,QAAZ,EAAsB,IAAtB,CAAX;AACA,SAAO,KAAK,QAAL,GACK,OADL,CACa,gBADb,EAC+B,EAD/B,EAEK,OAFL,CAEa,aAFb,EAE4B,uBAAuB,OAAvB,GAAiC,kBAF7D,EAGK,OAHL,CAGa,QAHb,EAGuB,UAHvB,CAAP;AAIA,OAAK,OAAL,CAAa,eAAb;AACA,SAAO,qCAAqC,IAA5C;AACA,SAAO,SAAS,IAAT,EAAe,EAAE,aAAa,CAAf,EAAf,IAAqC,IAA5C;AACA,KAAG,aAAH,CAAiB,UAAjB,EAA6B,IAA7B;AACA,UAAQ,GAAR,CAAY,UAAZ,EAAwB,OAAxB;;AAEA,WAAS,eAAT,CAAyB,CAAzB,EAA4B;AAC1B,QAAI,EAAE,OAAF,CAAU,KAAV,EAAiB,MAAjB,CAAJ;AACA,QAAI,SAAS,IAAI,MAAJ,CAAW,IAAI,gBAAf,EAAiC,GAAjC,CAAb;AACA,QAAI,QAAQ,CAAC,KAAK,KAAL,CAAW,MAAX,KAAsB,EAAvB,EAA2B,MAAvC;AACA,QAAI,SAAS,CAAb,EAAgB;AACd,eAAS,IAAI,MAAJ,CAAW,YAAY,CAAZ,GAAgB,qBAAhB,GAAwC,CAAxC,GAA4C,GAAvD,CAAT;AACA,aAAO,KAAK,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;AACD;AACF;AACF,CAxBD","file":"compile-dots-compiled.js","sourcesContent":["//compile doT templates to js functions\n'use strict';\n\nvar glob = require('glob')\n  , fs = require('fs')\n  , path = require('path')\n  , doT = require('dot')\n  , beautify = require('js-beautify').js_beautify;\n\nvar defsRootPath = process.argv[2] || path.join(__dirname, '../lib');\n\nvar defs = {};\nvar defFiles = glob.sync('./dot/**/*.def', { cwd: defsRootPath });\ndefFiles.forEach(function (f) {\n  var name = path.basename(f, '.def');\n  defs[name] = fs.readFileSync(path.join(defsRootPath, f));\n});\n\nvar filesRootPath = process.argv[3] || path.join(__dirname, '../lib');\nvar files = glob.sync('./dot/**/*.jst', { cwd: filesRootPath });\n\nvar dotjsPath = path.join(filesRootPath, './dotjs');\ntry { fs.mkdirSync(dotjsPath); } catch(e) {}\n\nconsole.log('\\n\\nCompiling:');\n\nvar FUNCTION_NAME = /function\\s+anonymous\\s*\\(it[^)]*\\)\\s*{/;\nvar OUT_EMPTY_STRING = /out\\s*\\+=\\s*'\\s*';/g;\nvar ISTANBUL = /\\'(istanbul[^']+)\\';/g;\nvar VARS = [\n  '$errs', '$valid', '$lvl', '$data', '$dataLvl',\n  '$errorKeyword', '$closingBraces', '$schemaPath'\n];\n\nfiles.forEach(function (f) {\n  var keyword = path.basename(f, '.jst');\n  var targetPath = path.join(dotjsPath, keyword + '.js');\n  var template = fs.readFileSync(path.join(filesRootPath, f));\n  var code = doT.compile(template, defs);\n  code = code.toString()\n             .replace(OUT_EMPTY_STRING, '')\n             .replace(FUNCTION_NAME, 'function generate_' + keyword + '(it, $keyword) {')\n             .replace(ISTANBUL, '/* $1 */');\n  VARS.forEach(removeUnusedVar);\n  code = \"'use strict';\\nmodule.exports = \" + code;\n  code = beautify(code, { indent_size: 2 }) + '\\n';\n  fs.writeFileSync(targetPath, code);\n  console.log('compiled', keyword);\n\n  function removeUnusedVar(v) {\n    v = v.replace(/\\$/g, '\\\\$$');\n    var regexp = new RegExp(v + '[^A-Za-z0-9_$]', 'g');\n    var count = (code.match(regexp) || []).length;\n    if (count == 1) {\n      regexp = new RegExp('var\\\\s+' + v + '\\\\s*=[^;]+;|var\\\\s+' + v + ';');\n      code = code.replace(regexp, '');\n    }\n  }\n});\n"]}