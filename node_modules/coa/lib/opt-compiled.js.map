{"version":3,"sources":["opt.js"],"names":[],"mappings":"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","file":"opt-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.6.3\nvar Cmd, Color, Opt, Q, fs;\n\nfs = require('fs');\n\nQ = require('q');\n\nColor = require('./color').Color;\n\nCmd = require('./cmd').Cmd;\n\n/**\nOption\n\nNamed entity. Options may have short and long keys for use from command line.\n@namespace\n@class Presents option\n*/\n\n\nexports.Opt = Opt = (function() {\n  /**\n  @constructs\n  @param {COA.Cmd} cmd parent command\n  */\n\n  function Opt(_cmd) {\n    this._cmd = _cmd;\n    this._cmd._opts.push(this);\n  }\n\n  /**\n  Set a canonical option identifier to be used anywhere in the API.\n  @param {String} _name option name\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.name = function(_name) {\n    this._name = _name;\n    return this;\n  };\n\n  /**\n  Set a long description for option to be used anywhere in text messages.\n  @param {String} _title option title\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.title = Cmd.prototype.title;\n\n  /**\n  Set a short key for option to be used with one hyphen from command line.\n  @param {String} _short\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.short = function(_short) {\n    this._short = _short;\n    return this._cmd._optsByKey['-' + _short] = this;\n  };\n\n  /**\n  Set a short key for option to be used with double hyphens from command line.\n  @param {String} _long\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.long = function(_long) {\n    this._long = _long;\n    return this._cmd._optsByKey['--' + _long] = this;\n  };\n\n  /**\n  Make an option boolean, i.e. option without value.\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.flag = function() {\n    this._flag = true;\n    return this;\n  };\n\n  /**\n  Makes an option accepts multiple values.\n  Otherwise, the value will be used by the latter passed.\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.arr = function() {\n    this._arr = true;\n    return this;\n  };\n\n  /**\n  Makes an option required.\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.req = function() {\n    this._req = true;\n    return this;\n  };\n\n  /**\n  Makes an option to act as a command,\n  i.e. program will exit just after option action.\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.only = function() {\n    this._only = true;\n    return this;\n  };\n\n  /**\n  Set a validation (or value) function for option.\n  Value from command line passes through before becoming available from API.\n  Using for validation and convertion simple types to any values.\n  @param {Function} _val validating function,\n      invoked in the context of option instance\n      and has one parameter with value from command line\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.val = function(_val) {\n    this._val = _val;\n    return this;\n  };\n\n  /**\n  Set a default value for option.\n  Default value passed through validation function as ordinary value.\n  @param {Object} _def\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.def = function(_def) {\n    this._def = _def;\n    return this;\n  };\n\n  /**\n  Make option value inputting stream.\n  It's add useful validation and shortcut for STDIN.\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.input = function() {\n    process.stdin.pause();\n    return this.def(process.stdin).val(function(v) {\n      var s;\n      if (typeof v === 'string') {\n        if (v === '-') {\n          return process.stdin;\n        } else {\n          s = fs.createReadStream(v, {\n            encoding: 'utf8'\n          });\n          s.pause();\n          return s;\n        }\n      } else {\n        return v;\n      }\n    });\n  };\n\n  /**\n  Make option value outputing stream.\n  It's add useful validation and shortcut for STDOUT.\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.output = function() {\n    return this.def(process.stdout).val(function(v) {\n      if (typeof v === 'string') {\n        if (v === '-') {\n          return process.stdout;\n        } else {\n          return fs.createWriteStream(v, {\n            encoding: 'utf8'\n          });\n        }\n      } else {\n        return v;\n      }\n    });\n  };\n\n  /**\n  Add action for current option command.\n  This action is performed if the current option\n  is present in parsed options (with any value).\n  @param {Function} act action function,\n      invoked in the context of command instance\n      and has the parameters:\n          - {Object} opts parsed options\n          - {Array} args parsed arguments\n          - {Object} res actions result accumulator\n      It can return rejected promise by Cmd.reject (in case of error)\n      or any other value treated as result.\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.act = function(act) {\n    var name, opt;\n    opt = this;\n    name = this._name;\n    this._cmd.act(function(opts) {\n      var res,\n        _this = this;\n      if (name in opts) {\n        res = act.apply(this, arguments);\n        if (opt._only) {\n          return Q.when(res, function(res) {\n            return _this.reject({\n              toString: function() {\n                return res.toString();\n              },\n              exitCode: 0\n            });\n          });\n        } else {\n          return res;\n        }\n      }\n    });\n    return this;\n  };\n\n  /**\n  Set custom additional completion for current option.\n  @param {Function} completion generation function,\n      invoked in the context of option instance.\n      Accepts parameters:\n          - {Object} opts completion options\n      It can return promise or any other value treated as result.\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.comp = Cmd.prototype.comp;\n\n  Opt.prototype._saveVal = function(opts, val) {\n    var _name;\n    if (this._val) {\n      val = this._val(val);\n    }\n    if (this._arr) {\n      (opts[_name = this._name] || (opts[_name] = [])).push(val);\n    } else {\n      opts[this._name] = val;\n    }\n    return val;\n  };\n\n  Opt.prototype._parse = function(argv, opts) {\n    return this._saveVal(opts, this._flag ? true : argv.shift());\n  };\n\n  Opt.prototype._checkParsed = function(opts, args) {\n    return !opts.hasOwnProperty(this._name);\n  };\n\n  Opt.prototype._usage = function() {\n    var nameStr, res;\n    res = [];\n    nameStr = this._name.toUpperCase();\n    if (this._short) {\n      res.push('-', Color('lgreen', this._short));\n      if (!this._flag) {\n        res.push(' ' + nameStr);\n      }\n      res.push(', ');\n    }\n    if (this._long) {\n      res.push('--', Color('green', this._long));\n      if (!this._flag) {\n        res.push('=' + nameStr);\n      }\n    }\n    res.push(' : ', this._title);\n    if (this._req) {\n      res.push(' ', Color('lred', '(required)'));\n    }\n    return res.join('');\n  };\n\n  Opt.prototype._requiredText = function() {\n    return 'Missing required option:\\n  ' + this._usage();\n  };\n\n  /**\n  Return rejected promise with error code.\n  Use in .val() for return with error.\n  @param {Object} reject reason\n      You can customize toString() method and exitCode property\n      of reason object.\n  @returns {Q.promise} rejected promise\n  */\n\n\n  Opt.prototype.reject = Cmd.prototype.reject;\n\n  /**\n  Finish chain for current option and return parent command instance.\n  @returns {COA.Cmd} parent command\n  */\n\n\n  Opt.prototype.end = Cmd.prototype.end;\n\n  /**\n  Apply function with arguments in context of option instance.\n  @param {Function} fn\n  @param {Array} args\n  @returns {COA.Opt} this instance (for chainability)\n  */\n\n\n  Opt.prototype.apply = Cmd.prototype.apply;\n\n  return Opt;\n\n})();\n"]}