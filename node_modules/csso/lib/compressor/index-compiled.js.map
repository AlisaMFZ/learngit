{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var List = require('../utils/list');\nvar clone = require('../utils/clone');\nvar usageUtils = require('./usage');\nvar clean = require('./clean');\nvar compress = require('./compress');\nvar restructureBlock = require('./restructure');\nvar walkRules = require('../utils/walk').rules;\n\nfunction readRulesChunk(rules, specialComments) {\n    var buffer = new List();\n    var nonSpaceTokenInBuffer = false;\n    var protectedComment;\n\n    rules.nextUntil(rules.head, function(node, item, list) {\n        if (node.type === 'Comment') {\n            if (!specialComments || node.value.charAt(0) !== '!') {\n                list.remove(item);\n                return;\n            }\n\n            if (nonSpaceTokenInBuffer || protectedComment) {\n                return true;\n            }\n\n            list.remove(item);\n            protectedComment = node;\n            return;\n        }\n\n        if (node.type !== 'Space') {\n            nonSpaceTokenInBuffer = true;\n        }\n\n        buffer.insert(list.remove(item));\n    });\n\n    return {\n        comment: protectedComment,\n        stylesheet: {\n            type: 'StyleSheet',\n            info: null,\n            rules: buffer\n        }\n    };\n}\n\nfunction compressChunk(ast, firstAtrulesAllowed, usageData, num, logger) {\n    logger('Compress block #' + num, null, true);\n\n    var seed = 1;\n    walkRules(ast, function markStylesheets() {\n        if ('id' in this.stylesheet === false) {\n            this.stylesheet.firstAtrulesAllowed = firstAtrulesAllowed;\n            this.stylesheet.id = seed++;\n        }\n    });\n    logger('init', ast);\n\n    // remove redundant\n    clean(ast, usageData);\n    logger('clean', ast);\n\n    // compress nodes\n    compress(ast, usageData);\n    logger('compress', ast);\n\n    return ast;\n}\n\nfunction getCommentsOption(options) {\n    var comments = 'comments' in options ? options.comments : 'exclamation';\n\n    if (typeof comments === 'boolean') {\n        comments = comments ? 'exclamation' : false;\n    } else if (comments !== 'exclamation' && comments !== 'first-exclamation') {\n        comments = false;\n    }\n\n    return comments;\n}\n\nfunction getRestructureOption(options) {\n    return 'restructure' in options ? options.restructure :\n           'restructuring' in options ? options.restructuring :\n           true;\n}\n\nfunction wrapBlock(block) {\n    return new List([{\n        type: 'Ruleset',\n        selector: {\n            type: 'Selector',\n            selectors: new List([{\n                type: 'SimpleSelector',\n                sequence: new List([{\n                    type: 'Identifier',\n                    name: 'x'\n                }])\n            }])\n        },\n        block: block\n    }]);\n}\n\nmodule.exports = function compress(ast, options) {\n    ast = ast || { type: 'StyleSheet', info: null, rules: new List() };\n    options = options || {};\n\n    var logger = typeof options.logger === 'function' ? options.logger : Function();\n    var specialComments = getCommentsOption(options);\n    var restructuring = getRestructureOption(options);\n    var firstAtrulesAllowed = true;\n    var usageData = false;\n    var inputRules;\n    var outputRules = new List();\n    var chunk;\n    var chunkNum = 1;\n    var chunkRules;\n\n    if (options.clone) {\n        ast = clone(ast);\n    }\n\n    if (ast.type === 'StyleSheet') {\n        inputRules = ast.rules;\n        ast.rules = outputRules;\n    } else {\n        inputRules = wrapBlock(ast);\n    }\n\n    if (options.usage) {\n        usageData = usageUtils.buildIndex(options.usage);\n    }\n\n    do {\n        chunk = readRulesChunk(inputRules, Boolean(specialComments));\n\n        compressChunk(chunk.stylesheet, firstAtrulesAllowed, usageData, chunkNum++, logger);\n\n        // structure optimisations\n        if (restructuring) {\n            restructureBlock(chunk.stylesheet, usageData, logger);\n        }\n\n        chunkRules = chunk.stylesheet.rules;\n\n        if (chunk.comment) {\n            // add \\n before comment if there is another content in outputRules\n            if (!outputRules.isEmpty()) {\n                outputRules.insert(List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n\n            outputRules.insert(List.createItem(chunk.comment));\n\n            // add \\n after comment if chunk is not empty\n            if (!chunkRules.isEmpty()) {\n                outputRules.insert(List.createItem({\n                    type: 'Raw',\n                    value: '\\n'\n                }));\n            }\n        }\n\n        if (firstAtrulesAllowed && !chunkRules.isEmpty()) {\n            var lastRule = chunkRules.last();\n\n            if (lastRule.type !== 'Atrule' ||\n               (lastRule.name !== 'import' && lastRule.name !== 'charset')) {\n                firstAtrulesAllowed = false;\n            }\n        }\n\n        if (specialComments !== 'exclamation') {\n            specialComments = false;\n        }\n\n        outputRules.appendList(chunkRules);\n    } while (!inputRules.isEmpty());\n\n    return {\n        ast: ast\n    };\n};\n"]}