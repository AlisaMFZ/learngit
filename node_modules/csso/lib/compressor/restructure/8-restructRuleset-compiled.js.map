{"version":3,"sources":["8-restructRuleset.js"],"names":[],"mappings":"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","file":"8-restructRuleset-compiled.js","sourcesContent":["var List = require('../../utils/list.js');\nvar utils = require('./utils.js');\nvar walkRulesRight = require('../../utils/walk.js').rulesRight;\n\nfunction calcSelectorLength(list) {\n    var length = 0;\n\n    list.each(function(data) {\n        length += data.id.length + 1;\n    });\n\n    return length - 1;\n}\n\nfunction calcDeclarationsLength(tokens) {\n    var length = 0;\n\n    for (var i = 0; i < tokens.length; i++) {\n        length += tokens[i].length;\n    }\n\n    return (\n        length +          // declarations\n        tokens.length - 1 // delimeters\n    );\n}\n\nfunction processRuleset(node, item, list) {\n    var avoidRulesMerge = this.stylesheet.avoidRulesMerge;\n    var selectors = node.selector.selectors;\n    var block = node.block;\n    var disallowDownMarkers = Object.create(null);\n    var allowMergeUp = true;\n    var allowMergeDown = true;\n\n    list.prevUntil(item.prev, function(prev, prevItem) {\n        // skip non-ruleset node if safe\n        if (prev.type !== 'Ruleset') {\n            return utils.unsafeToSkipNode.call(selectors, prev);\n        }\n\n        var prevSelectors = prev.selector.selectors;\n        var prevBlock = prev.block;\n\n        if (node.pseudoSignature !== prev.pseudoSignature) {\n            return true;\n        }\n\n        allowMergeDown = !prevSelectors.some(function(selector) {\n            return selector.compareMarker in disallowDownMarkers;\n        });\n\n        // try prev ruleset if simpleselectors has no equal specifity and element selector\n        if (!allowMergeDown && !allowMergeUp) {\n            return true;\n        }\n\n        // try to join by selectors\n        if (allowMergeUp && utils.isEqualLists(prevSelectors, selectors)) {\n            prevBlock.declarations.appendList(block.declarations);\n            list.remove(item);\n            return true;\n        }\n\n        // try to join by properties\n        var diff = utils.compareDeclarations(block.declarations, prevBlock.declarations);\n\n        // console.log(diff.eq, diff.ne1, diff.ne2);\n\n        if (diff.eq.length) {\n            if (!diff.ne1.length && !diff.ne2.length) {\n                // equal blocks\n                if (allowMergeDown) {\n                    utils.addSelectors(selectors, prevSelectors);\n                    list.remove(prevItem);\n                }\n\n                return true;\n            } else if (!avoidRulesMerge) { /* probably we don't need to prevent those merges for @keyframes\n                                              TODO: need to be checked */\n\n                if (diff.ne1.length && !diff.ne2.length) {\n                    // prevBlock is subset block\n                    var selectorLength = calcSelectorLength(selectors);\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    if (allowMergeUp && selectorLength < blockLength) {\n                        utils.addSelectors(prevSelectors, selectors);\n                        block.declarations = new List(diff.ne1);\n                    }\n                } else if (!diff.ne1.length && diff.ne2.length) {\n                    // node is subset of prevBlock\n                    var selectorLength = calcSelectorLength(prevSelectors);\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    if (allowMergeDown && selectorLength < blockLength) {\n                        utils.addSelectors(selectors, prevSelectors);\n                        prevBlock.declarations = new List(diff.ne2);\n                    }\n                } else {\n                    // diff.ne1.length && diff.ne2.length\n                    // extract equal block\n                    var newSelector = {\n                        type: 'Selector',\n                        info: {},\n                        selectors: utils.addSelectors(prevSelectors.copy(), selectors)\n                    };\n                    var newBlockLength = calcSelectorLength(newSelector.selectors) + 2; // selectors length + curly braces length\n                    var blockLength = calcDeclarationsLength(diff.eq); // declarations length\n\n                    // create new ruleset if declarations length greater than\n                    // ruleset description overhead\n                    if (allowMergeDown && blockLength >= newBlockLength) {\n                        var newRuleset = {\n                            type: 'Ruleset',\n                            info: {},\n                            pseudoSignature: node.pseudoSignature,\n                            selector: newSelector,\n                            block: {\n                                type: 'Block',\n                                info: {},\n                                declarations: new List(diff.eq)\n                            }\n                        };\n\n                        block.declarations = new List(diff.ne1);\n                        prevBlock.declarations = new List(diff.ne2.concat(diff.ne2overrided));\n                        list.insert(list.createItem(newRuleset), prevItem);\n                        return true;\n                    }\n                }\n            }\n        }\n\n        if (allowMergeUp) {\n            // TODO: disallow up merge only if any property interception only (i.e. diff.ne2overrided.length > 0);\n            // await property families to find property interception correctly\n            allowMergeUp = !prevSelectors.some(function(prevSelector) {\n                return selectors.some(function(selector) {\n                    return selector.compareMarker === prevSelector.compareMarker;\n                });\n            });\n        }\n\n        prevSelectors.each(function(data) {\n            disallowDownMarkers[data.compareMarker] = true;\n        });\n    });\n};\n\nmodule.exports = function restructRuleset(ast) {\n    walkRulesRight(ast, function(node, item, list) {\n        if (node.type === 'Ruleset') {\n            processRuleset.call(this, node, item, list);\n        }\n    });\n};\n"]}