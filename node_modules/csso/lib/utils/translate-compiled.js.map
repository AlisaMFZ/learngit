{"version":3,"sources":["translate.js"],"names":[],"mappings":"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","file":"translate-compiled.js","sourcesContent":["function each(list) {\n    if (list.head === null) {\n        return '';\n    }\n\n    if (list.head === list.tail) {\n        return translate(list.head.data);\n    }\n\n    return list.map(translate).join('');\n}\n\nfunction eachDelim(list, delimeter) {\n    if (list.head === null) {\n        return '';\n    }\n\n    if (list.head === list.tail) {\n        return translate(list.head.data);\n    }\n\n    return list.map(translate).join(delimeter);\n}\n\nfunction translate(node) {\n    switch (node.type) {\n        case 'StyleSheet':\n            return each(node.rules);\n\n        case 'Atrule':\n            var nodes = ['@', node.name];\n\n            if (node.expression && !node.expression.sequence.isEmpty()) {\n                nodes.push(' ', translate(node.expression));\n            }\n\n            if (node.block) {\n                nodes.push('{', translate(node.block), '}');\n            } else {\n                nodes.push(';');\n            }\n\n            return nodes.join('');\n\n        case 'Ruleset':\n            return translate(node.selector) + '{' + translate(node.block) + '}';\n\n        case 'Selector':\n            return eachDelim(node.selectors, ',');\n\n        case 'SimpleSelector':\n            var nodes = node.sequence.map(function(node) {\n                // add extra spaces around /deep/ combinator since comment beginning/ending may to be produced\n                if (node.type === 'Combinator' && node.name === '/deep/') {\n                    return ' ' + translate(node) + ' ';\n                }\n\n                return translate(node);\n            });\n\n            return nodes.join('');\n\n        case 'Block':\n            return eachDelim(node.declarations, ';');\n\n        case 'Declaration':\n            return translate(node.property) + ':' + translate(node.value);\n\n        case 'Property':\n            return node.name;\n\n        case 'Value':\n            return node.important\n                ? each(node.sequence) + '!important'\n                : each(node.sequence);\n\n        case 'Attribute':\n            var result = translate(node.name);\n            var flagsPrefix = ' ';\n\n            if (node.operator !== null) {\n                result += node.operator;\n\n                if (node.value !== null) {\n                    result += translate(node.value);\n\n                    // space between string and flags is not required\n                    if (node.value.type === 'String') {\n                        flagsPrefix = '';\n                    }\n                }\n            }\n\n            if (node.flags !== null) {\n                result += flagsPrefix + node.flags;\n            }\n\n            return '[' + result + ']';\n\n        case 'FunctionalPseudo':\n            return ':' + node.name + '(' + eachDelim(node.arguments, ',') + ')';\n\n        case 'Function':\n            return node.name + '(' + eachDelim(node.arguments, ',') + ')';\n\n        case 'Negation':\n            return ':not(' + eachDelim(node.sequence, ',') + ')';\n\n        case 'Braces':\n            return node.open + each(node.sequence) + node.close;\n\n        case 'Argument':\n        case 'AtruleExpression':\n            return each(node.sequence);\n\n        case 'Url':\n            return 'url(' + translate(node.value) + ')';\n\n        case 'Progid':\n            return translate(node.value);\n\n        case 'Combinator':\n            return node.name;\n\n        case 'Identifier':\n            return node.name;\n\n        case 'PseudoClass':\n            return ':' + node.name;\n\n        case 'PseudoElement':\n            return '::' + node.name;\n\n        case 'Class':\n            return '.' + node.name;\n\n        case 'Id':\n            return '#' + node.name;\n\n        case 'Hash':\n            return '#' + node.value;\n\n        case 'Dimension':\n            return node.value + node.unit;\n\n        case 'Nth':\n            return node.value;\n\n        case 'Number':\n            return node.value;\n\n        case 'String':\n            return node.value;\n\n        case 'Operator':\n            return node.value;\n\n        case 'Raw':\n            return node.value;\n\n        case 'Unknown':\n            return node.value;\n\n        case 'Percentage':\n            return node.value + '%';\n\n        case 'Space':\n            return ' ';\n\n        case 'Comment':\n            return '/*' + node.value + '*/';\n\n        default:\n            throw new Error('Unknown node type: ' + node.type);\n    }\n}\n\nmodule.exports = translate;\n"]}