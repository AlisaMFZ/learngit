{"version":3,"sources":["extend.test.js"],"names":[],"mappings":"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","file":"extend.test-compiled.js","sourcesContent":["var assert = require('chai').assert,\n\tlib = require('../lib/deap');\n\ndescribe('shallow extend', function() {\n\tvar shallow = lib.extendShallow;\n\n\tit('should return a reference to the first argument', function() {\n\t\tvar a = { burp: 'adurp' },\n\t\t\tb = { burp: 'zing', grr: 'arghh' };\n\n\t\tvar result = shallow(a, b);\n\n\t\tassert.strictEqual(result, a);\n\t});\n\n\tit('should copy simple values', function() {\n\t\tvar a = {},\n\t\t\tb = { s: 'string', n: 1, b: false, a: [], o: {}};\n\n\t\tvar c = shallow(a, b);\n\n\t\tassert.deepEqual(c, a);\n\t\tassert.equal(c.s, b.s);\n\t\tassert.equal(c.n, b.n);\n\t\tassert.equal(c.b, b.b);\n\t\tassert.strictEqual(c.a, b.a);\n\t\tassert.strictEqual(c.o, b.o);\n\t});\n\n\tit('should only alter first param', function() {\n\t\tvar a = { doom: 'song' },\n\t\t\tb = { burp: 'adurp' },\n\t\t\tc = { grr: 'argh' };\n\n\t\tvar result = shallow({}, a, b, c);\n\n\t\tassert.deepEqual(a, { doom: 'song' });\n\t\tassert.deepEqual(b, { burp: 'adurp' });\n\t\tassert.deepEqual(c, { grr: 'argh' });\n\t\tassert.sameMembers(Object.keys(result), ['doom', 'burp', 'grr']);\n\t\tassert.equal(result.doom, a.doom);\n\t\tassert.equal(result.burp, b.burp);\n\t\tassert.equal(result.grr, c.grr);\n\n\t});\n\n\tit('should preserve object references', function() {\n\t\tvar deep = { foo: 'bar' },\n\t\t\ta = { burp: 'adurp' , nested: deep };\n\n\n\t\tvar result = shallow({}, a);\n\n\t\tassert.strictEqual(result.nested, deep);\n\t});\n\n\tit('should preserve date references', function() {\n\t\tvar a = { burp: 'adurp', date: new Date() },\n\t\t\tdate = a.date;\n\n\t\tvar result = shallow({}, a);\n\n\t\tassert.strictEqual(result.date, date);\n\t});\n\n\tit('should preserve regexp references', function() {\n\t\tvar a = { burp: 'adurp', regexp: /foo/g },\n\t\t\tregexp = a.regexp;\n\n\t\tvar result = shallow({}, a);\n\n\t\tassert.strictEqual(result.regexp, regexp);\n\t});\n\n\tit('should preserve array references', function() {\n\t\tvar a = { burp: 'adurp', array: [] },\n\t\t\tarray = a.array;\n\n\t\tvar result = shallow({}, a);\n\n\t\tassert.strictEqual(result.array, array);\n\t});\n\n\tit('should not pick up non-enumberable properties', function() {\n\t\tvar result = shallow({}, function() {});\n\n\t\tassert.deepEqual(result, {});\n\t\tassert.equal(Object.keys(result).length, 0);\n\t\tassert.equal(Object.getOwnPropertyNames(result).length, 0);\n\t});\n});\n\ndescribe('deep extend', function() {\n\tvar deepExtend = lib.extend;\n\n\tit('should return a reference to the first argument', function() {\n\t\tvar a = { burp: 'adurp' },\n\t\t\tb = { burp: 'zing', grr: 'arghh' };\n\n\t\tvar result = deepExtend(a, b);\n\n\t\tassert.strictEqual(result, a);\n\t});\n\n\tit('should not preserve object references', function() {\n\t\tvar deeper = { boo: 'far' },\n\t\t\tdeep = { foo: 'bar', nested: deeper },\n\t\t\ta = { burp: 'adurp' , nested: deep };\n\n\t\tvar result = deepExtend({}, a);\n\n\t\tassert.deepEqual(result, a);\n\t\tassert.notStrictEqual(result.nested, deep);\n\t\tassert.notStrictEqual(result.nested.nested, deeper);\n\t});\n\n\tit('should not preserve date references', function() {\n\t\tvar a = { burp: 'adurp', date: new Date() },\n\t\t\tdate = a.date;\n\n\t\tvar result = deepExtend({}, a);\n\n\t\tassert.deepEqual(result, a);\n\t\tassert.equal(result.date.getTime(), date.getTime()); // added this because deepEqual doesn't work with dates\n\t\tassert.notStrictEqual(result.date, date);\n\t});\n\n\tit('should not preserve regexp references', function() {\n\t\tvar a = { burp: 'adurp', regexp: /foo/g },\n\t\t\tregexp = a.regexp;\n\n\t\tvar result = deepExtend({}, a);\n\n\t\tassert.deepEqual(result, a);\n\t\tassert.notStrictEqual(result.regexp, regexp);\n\t});\n\n\tit('should not preserve array references', function() {\n\t\tvar deeper = { boo: 'far' },\n\t\t\tdeep = { foo: 'bar', nested: deeper },\n\t\t\ta = { burp: 'adurp' , nested: [deep, deeper] };\n\n\t\tvar result = deepExtend({}, a);\n\n\t\tassert.deepEqual(result, a);\n\t\tassert.notStrictEqual(result.nested, a.nested);\n\t\tassert.notStrictEqual(result.nested[0], deep);\n\t\tassert.notStrictEqual(result.nested[0].nested, deeper);\n\t\tassert.notStrictEqual(result.nested[1], deeper);\n\n\t\tassert.deepEqual(result.nested[0].nested, result.nested[1]);\n\t\tassert.notStrictEqual(result.nested[0].nested, result.nested[1]);\n\t});\n\n});\n"]}