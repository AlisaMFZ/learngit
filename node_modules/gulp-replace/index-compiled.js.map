{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,YAAY,QAAQ,2BAAR,CAAhB;AACA,IAAI,KAAK,QAAQ,eAAR,CAAT;AACA,IAAI,iBAAiB,QAAQ,gBAAR,CAArB;;AAEA,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAiB,WAAjB,EAA8B,OAA9B,EAAuC;AACtD,SAAO,IAAI,SAAJ,CAAc;AACnB,gBAAY,IADO;AAEnB,eAAW,mBAAS,IAAT,EAAe,GAAf,EAAoB,QAApB,EAA8B;AACvC,UAAI,KAAK,MAAL,EAAJ,EAAmB;AACjB,eAAO,SAAS,IAAT,EAAe,IAAf,CAAP;AACD;;AAED,eAAS,SAAT,GAAqB;AACnB,YAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB,eAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,IAAd,CAAmB,GAAG,MAAH,EAAW,WAAX,CAAnB,CAAhB;AACA,iBAAO,SAAS,IAAT,EAAe,IAAf,CAAP;AACD;;AAED,YAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB,cAAI,kBAAkB,MAAtB,EAA8B;AAC5B,iBAAK,QAAL,GAAgB,IAAI,MAAJ,CAAW,OAAO,KAAK,QAAZ,EAAsB,OAAtB,CAA8B,MAA9B,EAAsC,WAAtC,CAAX,CAAhB;AACD,WAFD,MAGK;AACH,gBAAI,SAAS,OAAO,KAAK,QAAZ,EAAsB,KAAtB,CAA4B,MAA5B,CAAb;;AAEA,gBAAI,MAAJ;AACA,gBAAI,OAAO,WAAP,KAAuB,UAA3B,EAAuC;AACrC;AACA;AACA;AACA,uBAAS,CAAE,OAAO,CAAP,CAAF,CAAT;;AAEA;AACA,mBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC;AACA,uBAAO,IAAP,CAAY,YAAY,MAAZ,CAAZ;;AAEA;AACA,uBAAO,IAAP,CAAY,OAAO,CAAP,CAAZ;AACD;;AAED,uBAAS,OAAO,IAAP,CAAY,EAAZ,CAAT;AACD,aAhBD,MAiBK;AACH,uBAAS,OAAO,IAAP,CAAY,WAAZ,CAAT;AACD;;AAED,iBAAK,QAAL,GAAgB,IAAI,MAAJ,CAAW,MAAX,CAAhB;AACD;AACD,iBAAO,SAAS,IAAT,EAAe,IAAf,CAAP;AACD;;AAED,iBAAS,IAAT,EAAe,IAAf;AACD;;AAED,UAAI,WAAW,QAAQ,UAAvB,EAAmC;AACjC,uBAAe,MAAf,CAAsB,KAAK,IAA3B,EAAiC,KAAK,QAAtC,EAAgD,UAAS,GAAT,EAAc,MAAd,EAAsB;AACpE,cAAI,GAAJ,EAAS;AACP,mBAAO,SAAS,GAAT,EAAc,IAAd,CAAP;AACD;;AAED,cAAI,CAAC,MAAL,EAAa;AACX,qBAAS,IAAT,EAAe,IAAf;AACD,WAFD,MAEO;AACL;AACD;AACF,SAVD;;AAYA;AACD;;AAED;AACD;AAnEkB,GAAd,CAAP;AAqED,CAtED","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar Transform = require('readable-stream/transform');\nvar rs = require('replacestream');\nvar istextorbinary = require('istextorbinary');\n\nmodule.exports = function(search, replacement, options) {\n  return new Transform({\n    objectMode: true,\n    transform: function(file, enc, callback) {\n      if (file.isNull()) {\n        return callback(null, file);\n      }\n\n      function doReplace() {\n        if (file.isStream()) {\n          file.contents = file.contents.pipe(rs(search, replacement));\n          return callback(null, file);\n        }\n\n        if (file.isBuffer()) {\n          if (search instanceof RegExp) {\n            file.contents = new Buffer(String(file.contents).replace(search, replacement));\n          }\n          else {\n            var chunks = String(file.contents).split(search);\n\n            var result;\n            if (typeof replacement === 'function') {\n              // Start with the first chunk already in the result\n              // Replacements will be added thereafter\n              // This is done to avoid checking the value of i in the loop\n              result = [ chunks[0] ];\n\n              // The replacement function should be called once for each match\n              for (var i = 1; i < chunks.length; i++) {\n                // Add the replacement value\n                result.push(replacement(search));\n\n                // Add the next chunk\n                result.push(chunks[i]);\n              }\n\n              result = result.join('');\n            }\n            else {\n              result = chunks.join(replacement);\n            }\n\n            file.contents = new Buffer(result);\n          }\n          return callback(null, file);\n        }\n\n        callback(null, file);\n      }\n\n      if (options && options.skipBinary) {\n        istextorbinary.isText(file.path, file.contents, function(err, result) {\n          if (err) {\n            return callback(err, file);\n          }\n\n          if (!result) {\n            callback(null, file);\n          } else {\n            doReplace();\n          }\n        });\n\n        return;\n      }\n\n      doReplace();\n    }\n  });\n};\n"]}