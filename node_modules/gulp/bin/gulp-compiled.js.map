{"version":3,"sources":["gulp.js"],"names":[],"mappings":"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","file":"gulp-compiled.js","sourcesContent":["\n\n'use strict';\nvar gutil = require('gulp-util');\nvar prettyTime = require('pretty-hrtime');\nvar chalk = require('chalk');\nvar semver = require('semver');\nvar archy = require('archy');\nvar Liftoff = require('liftoff');\nvar tildify = require('tildify');\nvar interpret = require('interpret');\nvar v8flags = require('v8flags');\nvar completion = require('../lib/completion');\nvar argv = require('minimist')(process.argv.slice(2));\nvar taskTree = require('../lib/taskTree');\n\n// Set env var for ORIGINAL cwd\n// before anything touches it\nprocess.env.INIT_CWD = process.cwd();\n\nvar cli = new Liftoff({\n  name: 'gulp',\n  completions: completion,\n  extensions: interpret.jsVariants,\n  v8flags: v8flags,\n});\n\n// Exit with 0 or 1\nvar failed = false;\nprocess.once('exit', function(code) {\n  if (code === 0 && failed) {\n    process.exit(1);\n  }\n});\n\n// Parse those args m8\nvar cliPackage = require('../package');\nvar versionFlag = argv.v || argv.version;\nvar tasksFlag = argv.T || argv.tasks;\nvar tasks = argv._;\nvar toRun = tasks.length ? tasks : ['default'];\n\n// This is a hold-over until we have a better logging system\n// with log levels\nvar simpleTasksFlag = argv['tasks-simple'];\nvar shouldLog = !argv.silent && !simpleTasksFlag;\n\nif (!shouldLog) {\n  gutil.log = function() {};\n}\n\ncli.on('require', function(name) {\n  gutil.log('Requiring external module', chalk.magenta(name));\n});\n\ncli.on('requireFail', function(name) {\n  gutil.log(chalk.red('Failed to load external module'), chalk.magenta(name));\n});\n\ncli.on('respawn', function(flags, child) {\n  var nodeFlags = chalk.magenta(flags.join(', '));\n  var pid = chalk.magenta(child.pid);\n  gutil.log('Node flags detected:', nodeFlags);\n  gutil.log('Respawned to PID:', pid);\n});\n\ncli.launch({\n  cwd: argv.cwd,\n  configPath: argv.gulpfile,\n  require: argv.require,\n  completion: argv.completion,\n}, handleArguments);\n\n// The actual logic\nfunction handleArguments(env) {\n  if (versionFlag && tasks.length === 0) {\n    gutil.log('CLI version', cliPackage.version);\n    if (env.modulePackage && typeof env.modulePackage.version !== 'undefined') {\n      gutil.log('Local version', env.modulePackage.version);\n    }\n    process.exit(0);\n  }\n\n  if (!env.modulePath) {\n    gutil.log(\n      chalk.red('Local gulp not found in'),\n      chalk.magenta(tildify(env.cwd))\n    );\n    gutil.log(chalk.red('Try running: npm install gulp'));\n    process.exit(1);\n  }\n\n  if (!env.configPath) {\n    gutil.log(chalk.red('No gulpfile found'));\n    process.exit(1);\n  }\n\n  // Check for semver difference between cli and local installation\n  if (semver.gt(cliPackage.version, env.modulePackage.version)) {\n    gutil.log(chalk.red('Warning: gulp version mismatch:'));\n    gutil.log(chalk.red('Global gulp is', cliPackage.version));\n    gutil.log(chalk.red('Local gulp is', env.modulePackage.version));\n  }\n\n  // Chdir before requiring gulpfile to make sure\n  // we let them chdir as needed\n  if (process.cwd() !== env.cwd) {\n    process.chdir(env.cwd);\n    gutil.log(\n      'Working directory changed to',\n      chalk.magenta(tildify(env.cwd))\n    );\n  }\n\n  // This is what actually loads up the gulpfile\n  require(env.configPath);\n  gutil.log('Using gulpfile', chalk.magenta(tildify(env.configPath)));\n\n  var gulpInst = require(env.modulePath);\n  logEvents(gulpInst);\n\n  process.nextTick(function() {\n    if (simpleTasksFlag) {\n      return logTasksSimple(env, gulpInst);\n    }\n    if (tasksFlag) {\n      return logTasks(env, gulpInst);\n    }\n    gulpInst.start.apply(gulpInst, toRun);\n  });\n}\n\nfunction logTasks(env, localGulp) {\n  var tree = taskTree(localGulp.tasks);\n  tree.label = 'Tasks for ' + chalk.magenta(tildify(env.configPath));\n  archy(tree)\n    .split('\\n')\n    .forEach(function(v) {\n      if (v.trim().length === 0) {\n        return;\n      }\n      gutil.log(v);\n    });\n}\n\nfunction logTasksSimple(env, localGulp) {\n  console.log(Object.keys(localGulp.tasks)\n    .join('\\n')\n    .trim());\n}\n\n// Format orchestrator errors\nfunction formatError(e) {\n  if (!e.err) {\n    return e.message;\n  }\n\n  // PluginError\n  if (typeof e.err.showStack === 'boolean') {\n    return e.err.toString();\n  }\n\n  // Normal error\n  if (e.err.stack) {\n    return e.err.stack;\n  }\n\n  // Unknown (string, number, etc.)\n  return new Error(String(e.err)).stack;\n}\n\n// Wire up logging events\nfunction logEvents(gulpInst) {\n\n  // Total hack due to poor error management in orchestrator\n  gulpInst.on('err', function() {\n    failed = true;\n  });\n\n  gulpInst.on('task_start', function(e) {\n    // TODO: batch these\n    // so when 5 tasks start at once it only logs one time with all 5\n    gutil.log('Starting', '\\'' + chalk.cyan(e.task) + '\\'...');\n  });\n\n  gulpInst.on('task_stop', function(e) {\n    var time = prettyTime(e.hrDuration);\n    gutil.log(\n      'Finished', '\\'' + chalk.cyan(e.task) + '\\'',\n      'after', chalk.magenta(time)\n    );\n  });\n\n  gulpInst.on('task_err', function(e) {\n    var msg = formatError(e);\n    var time = prettyTime(e.hrDuration);\n    gutil.log(\n      '\\'' + chalk.cyan(e.task) + '\\'',\n      chalk.red('errored after'),\n      chalk.magenta(time)\n    );\n    gutil.log(msg);\n  });\n\n  gulpInst.on('task_not_found', function(err) {\n    gutil.log(\n      chalk.red('Task \\'' + err.task + '\\' is not in your gulpfile')\n    );\n    gutil.log('Please check the documentation for proper gulpfile formatting');\n    process.exit(1);\n  });\n}\n"]}