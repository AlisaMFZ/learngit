{"version":3,"sources":["istextorbinary.js"],"names":[],"mappings":"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","file":"istextorbinary-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.8.0\n(function() {\n  var binaryExtensions, isTextOrBinary, pathUtil, textExtensions,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  pathUtil = require('path');\n\n  textExtensions = require('textextensions');\n\n  binaryExtensions = require('binaryextensions');\n\n  isTextOrBinary = {\n    isTextSync: function(filename, buffer) {\n      var extension, isText, _i, _len;\n      isText = null;\n      if (filename) {\n        filename = pathUtil.basename(filename).split('.');\n        for (_i = 0, _len = filename.length; _i < _len; _i++) {\n          extension = filename[_i];\n          if (__indexOf.call(textExtensions, extension) >= 0) {\n            isText = true;\n            break;\n          }\n          if (__indexOf.call(binaryExtensions, extension) >= 0) {\n            isText = false;\n            break;\n          }\n        }\n      }\n      if (buffer && isText === null) {\n        isText = isTextOrBinary.getEncodingSync(buffer) === 'utf8';\n      }\n      return isText;\n    },\n    isText: function(filename, buffer, next) {\n      var result;\n      result = isTextOrBinary.isTextSync(filename, buffer);\n      if (result instanceof Error) {\n        next(err);\n      } else {\n        next(null, result);\n      }\n      return this;\n    },\n    isBinarySync: function(filename, buffer, next) {\n      var result;\n      result = isTextOrBinary.isTextSync(filename, buffer);\n      if (result instanceof Error) {\n        return result;\n      } else {\n        return !result;\n      }\n      return this;\n    },\n    isBinary: function(filename, buffer, next) {\n      isTextOrBinary.isText(filename, buffer, function(err, result) {\n        if (err) {\n          return next(err);\n        }\n        return next(null, !result);\n      });\n      return this;\n    },\n    getEncodingSync: function(buffer, opts) {\n      var binaryEncoding, charCode, chunkBegin, chunkEnd, chunkLength, contentChunkUTF8, encoding, i, textEncoding, _i, _ref;\n      textEncoding = 'utf8';\n      binaryEncoding = 'binary';\n      if (opts == null) {\n        chunkLength = 24;\n        encoding = isTextOrBinary.getEncodingSync(buffer, {\n          chunkLength: chunkLength,\n          chunkBegin: chunkBegin\n        });\n        if (encoding === textEncoding) {\n          chunkBegin = Math.max(0, Math.floor(buffer.length / 2) - chunkLength);\n          encoding = isTextOrBinary.getEncodingSync(buffer, {\n            chunkLength: chunkLength,\n            chunkBegin: chunkBegin\n          });\n          if (encoding === textEncoding) {\n            chunkBegin = Math.max(0, buffer.length - chunkLength);\n            encoding = isTextOrBinary.getEncodingSync(buffer, {\n              chunkLength: chunkLength,\n              chunkBegin: chunkBegin\n            });\n          }\n        }\n      } else {\n        chunkLength = opts.chunkLength, chunkBegin = opts.chunkBegin;\n        if (chunkLength == null) {\n          chunkLength = 24;\n        }\n        if (chunkBegin == null) {\n          chunkBegin = 0;\n        }\n        chunkEnd = Math.min(buffer.length, chunkBegin + chunkLength);\n        contentChunkUTF8 = buffer.toString(textEncoding, chunkBegin, chunkEnd);\n        encoding = textEncoding;\n        for (i = _i = 0, _ref = contentChunkUTF8.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n          charCode = contentChunkUTF8.charCodeAt(i);\n          if (charCode === 65533 || charCode <= 8) {\n            encoding = binaryEncoding;\n            break;\n          }\n        }\n      }\n      return encoding;\n    },\n    getEncoding: function(buffer, opts, next) {\n      var result;\n      result = isTextOrBinary.getEncodingSync(buffer, opts);\n      if (result instanceof Error) {\n        next(err);\n      } else {\n        next(null, result);\n      }\n      return this;\n    }\n  };\n\n  module.exports = isTextOrBinary;\n\n}).call(this);\n"]}