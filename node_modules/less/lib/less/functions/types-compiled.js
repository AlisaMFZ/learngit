"use strict";

var Keyword = require("../tree/keyword"),
    DetachedRuleset = require("../tree/detached-ruleset"),
    Dimension = require("../tree/dimension"),
    Color = require("../tree/color"),
    Quoted = require("../tree/quoted"),
    Anonymous = require("../tree/anonymous"),
    URL = require("../tree/url"),
    Operation = require("../tree/operation"),
    functionRegistry = require("./function-registry");

var isa = function isa(n, Type) {
    return n instanceof Type ? Keyword.True : Keyword.False;
},
    isunit = function isunit(n, unit) {
    if (unit === undefined) {
        throw { type: "Argument", message: "missing the required second argument to isunit." };
    }
    unit = typeof unit.value === "string" ? unit.value : unit;
    if (typeof unit !== "string") {
        throw { type: "Argument", message: "Second argument to isunit should be a unit or a string." };
    }
    return n instanceof Dimension && n.unit.is(unit) ? Keyword.True : Keyword.False;
},
    getItemsFromNode = function getItemsFromNode(node) {
    // handle non-array values as an array of length 1
    // return 'undefined' if index is invalid
    var items = Array.isArray(node.value) ? node.value : Array(node);

    return items;
};
functionRegistry.addMultiple({
    isruleset: function isruleset(n) {
        return isa(n, DetachedRuleset);
    },
    iscolor: function iscolor(n) {
        return isa(n, Color);
    },
    isnumber: function isnumber(n) {
        return isa(n, Dimension);
    },
    isstring: function isstring(n) {
        return isa(n, Quoted);
    },
    iskeyword: function iskeyword(n) {
        return isa(n, Keyword);
    },
    isurl: function isurl(n) {
        return isa(n, URL);
    },
    ispixel: function ispixel(n) {
        return isunit(n, 'px');
    },
    ispercentage: function ispercentage(n) {
        return isunit(n, '%');
    },
    isem: function isem(n) {
        return isunit(n, 'em');
    },
    isunit: isunit,
    unit: function unit(val, _unit) {
        if (!(val instanceof Dimension)) {
            throw { type: "Argument",
                message: "the first argument to unit must be a number" + (val instanceof Operation ? ". Have you forgotten parenthesis?" : "") };
        }
        if (_unit) {
            if (_unit instanceof Keyword) {
                _unit = _unit.value;
            } else {
                _unit = _unit.toCSS();
            }
        } else {
            _unit = "";
        }
        return new Dimension(val.value, _unit);
    },
    "get-unit": function getUnit(n) {
        return new Anonymous(n.unit);
    },
    extract: function extract(values, index) {
        index = index.value - 1; // (1-based index)

        return getItemsFromNode(values)[index];
    },
    length: function length(values) {
        return new Dimension(getItemsFromNode(values).length);
    }
});

//# sourceMappingURL=types-compiled.js.map