{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,QAAQ,UAAR,CAAV;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,SAAS,KAAT,EAAgB,YAAY;;AAE1B,KAAG,uCAAH,EAA4C,YAAW;AACrD,WAAO,MAAP,CAAc,YAAW;AACvB,UAAI,SAAJ;AACD,KAFD;AAGD,GAJD;;AAMA,KAAG,kCAAH,EAAuC,YAAW;AAChD,WAAO,MAAP,CAAc,YAAW;AACvB,UAAI,IAAJ;AACD,KAFD;AAGD,GAJD;;AAMA,KAAG,mDAAH,EAAwD,YAAW;AACjE,WAAO,KAAP,CAAa,kCAAb,EAAiD,IAAI,SAAJ,CAAjD;AACD,GAFD;;AAIA,KAAG,0DAAH,EAA+D,YAAW;AACxE,QAAI,OAAO,KAAK,KAAL,CAAY,KAAK,MAAL,KAAgB,MAAjB,GAA2B,CAAtC,IAA4C,IAAI,IAAJ,EAAD,CAAW,OAAX,EAAtD;AACA,QAAI,OAAO,KAAK,KAAL,CAAY,KAAK,MAAL,KAAgB,MAAjB,GAA2B,CAAtC,IAA4C,IAAI,IAAJ,EAAD,CAAW,OAAX,EAAtD;;AAEA,QAAI,SAAS,IAAb,EAAmB;AACjB,aAAO,QAAP,CAAgB,IAAI,IAAJ,CAAhB,EAA2B,IAAI,IAAJ,CAA3B;AACD,KAFD,MAEO;AACL,aAAO,KAAP,CAAa,IAAI,IAAJ,CAAb,EAAwB,IAAI,IAAJ,CAAxB;AACD;AACF,GATD;;AAWA,KAAG,gCAAH,EAAqC,YAAW;AAC9C,QAAI,SAAS,IAAI,MAAJ,CAAW,eAAX,EAA4B,MAA5B,CAAb;;AAEA,WAAO,KAAP,CAAa,IAAI,MAAJ,CAAb,EAA0B,IAAI,eAAJ,CAA1B;AACD,GAJD;;AAMA,KAAG,+CAAH,EAAoD,YAAW;AAC7D,QAAI,QAAQ,IAAI,KAAJ,EAAW,EAAE,UAAU,IAAZ,EAAX,CAAZ;AACA,QAAI,QAAQ,IAAI,QAAQ,GAAZ,EAAiB,EAAE,UAAU,IAAZ,EAAkB,UAAW,QAA7B,EAAjB,CAAZ;AACA,QAAI,QAAQ,IAAI,QAAQ,GAAZ,EAAiB,EAAE,UAAW,QAAb,EAAjB,CAAZ;AACA,WAAO,KAAP,CAAa,KAAb,EAAoB,kCAApB;AACD,GALD;AAMD,CAzCD","file":"test-compiled.js","sourcesContent":["var md5 = require('./md5.js');\nvar assert = require('assert');\n\ndescribe('md5', function () {\n\n  it('should throw an error for `undefined`', function() {\n    assert.throws(function() {\n      md5(undefined);\n    });\n  });\n\n  it('should throw an error for `null`', function() {\n    assert.throws(function() {\n      md5(null);\n    });\n  });\n\n  it('should return the expected MD5 hash for \"message\"', function() {\n    assert.equal('78e731027d8fd50ed642340b7c9a63b3', md5('message'));\n  });\n\n  it('should not return the same hash for random numbers twice', function() {\n    var msg1 = Math.floor((Math.random() * 100000) + 1) + (new Date).getTime();\n    var msg2 = Math.floor((Math.random() * 100000) + 1) + (new Date).getTime();\n\n    if (msg1 !== msg2) {\n      assert.notEqual(md5(msg1), md5(msg2));\n    } else {\n      assert.equal(md5(msg1), md5(msg1));\n    }\n  });\n\n  it('should support Node.js Buffers', function() {\n    var buffer = new Buffer('message áßäöü', 'utf8');\n\n    assert.equal(md5(buffer), md5('message áßäöü'));\n  })\n\n  it('should be able to use a binary encoded string', function() {\n    var hash1 = md5('abc', { asString: true });\n    var hash2 = md5(hash1 + 'a', { asString: true, encoding : 'binary' });\n    var hash3 = md5(hash1 + 'a', { encoding : 'binary' });\n    assert.equal(hash3, '131f0ac52813044f5110e4aec638c169');\n  });\n});\n"]}