{"version":3,"sources":["tokenize.js"],"names":[],"mappings":"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","file":"tokenize-compiled.js","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.default = tokenize;\nvar singleQuote = 39,\n    doubleQuote = 34,\n    backslash = 92,\n    slash = 47,\n    newline = 10,\n    space = 32,\n    feed = 12,\n    tab = 9,\n    cr = 13,\n    plus = 43,\n    gt = 62,\n    tilde = 126,\n    pipe = 124,\n    comma = 44,\n    openBracket = 40,\n    closeBracket = 41,\n    openSq = 91,\n    closeSq = 93,\n    semicolon = 59,\n    asterisk = 42,\n    colon = 58,\n    ampersand = 38,\n    at = 64,\n    atEnd = /[ \\n\\t\\r\\{\\(\\)'\"\\\\;/]/g,\n    wordEnd = /[ \\n\\t\\r\\(\\)\\*:;@!&'\"\\+\\|~>,\\[\\]\\\\]|\\/(?=\\*)/g;\n\nfunction tokenize(input) {\n    var tokens = [];\n    var css = input.css.valueOf();\n\n    var code = void 0,\n        next = void 0,\n        quote = void 0,\n        lines = void 0,\n        last = void 0,\n        content = void 0,\n        escape = void 0,\n        nextLine = void 0,\n        nextOffset = void 0,\n        escaped = void 0,\n        escapePos = void 0;\n\n    var length = css.length;\n    var offset = -1;\n    var line = 1;\n    var pos = 0;\n\n    var unclosed = function unclosed(what, end) {\n        if (input.safe) {\n            css += end;\n            next = css.length - 1;\n        } else {\n            throw input.error('Unclosed ' + what, line, pos - offset, pos);\n        }\n    };\n\n    while (pos < length) {\n        code = css.charCodeAt(pos);\n\n        if (code === newline) {\n            offset = pos;\n            line += 1;\n        }\n\n        switch (code) {\n            case newline:\n            case space:\n            case tab:\n            case cr:\n            case feed:\n                next = pos;\n                do {\n                    next += 1;\n                    code = css.charCodeAt(next);\n                    if (code === newline) {\n                        offset = next;\n                        line += 1;\n                    }\n                } while (code === space || code === newline || code === tab || code === cr || code === feed);\n\n                tokens.push(['space', css.slice(pos, next), line, pos - offset, pos]);\n                pos = next - 1;\n                break;\n\n            case plus:\n            case gt:\n            case tilde:\n            case pipe:\n                next = pos;\n                do {\n                    next += 1;\n                    code = css.charCodeAt(next);\n                } while (code === plus || code === gt || code === tilde || code === pipe);\n                tokens.push(['combinator', css.slice(pos, next), line, pos - offset, pos]);\n                pos = next - 1;\n                break;\n\n            case asterisk:\n                tokens.push(['*', '*', line, pos - offset, pos]);\n                break;\n\n            case ampersand:\n                tokens.push(['&', '&', line, pos - offset, pos]);\n                break;\n\n            case comma:\n                tokens.push([',', ',', line, pos - offset, pos]);\n                break;\n\n            case openSq:\n                tokens.push(['[', '[', line, pos - offset, pos]);\n                break;\n\n            case closeSq:\n                tokens.push([']', ']', line, pos - offset, pos]);\n                break;\n\n            case colon:\n                tokens.push([':', ':', line, pos - offset, pos]);\n                break;\n\n            case semicolon:\n                tokens.push([';', ';', line, pos - offset, pos]);\n                break;\n\n            case openBracket:\n                tokens.push(['(', '(', line, pos - offset, pos]);\n                break;\n\n            case closeBracket:\n                tokens.push([')', ')', line, pos - offset, pos]);\n                break;\n\n            case singleQuote:\n            case doubleQuote:\n                quote = code === singleQuote ? \"'\" : '\"';\n                next = pos;\n                do {\n                    escaped = false;\n                    next = css.indexOf(quote, next + 1);\n                    if (next === -1) {\n                        unclosed('quote', quote);\n                    }\n                    escapePos = next;\n                    while (css.charCodeAt(escapePos - 1) === backslash) {\n                        escapePos -= 1;\n                        escaped = !escaped;\n                    }\n                } while (escaped);\n\n                tokens.push(['string', css.slice(pos, next + 1), line, pos - offset, line, next - offset, pos]);\n                pos = next;\n                break;\n\n            case at:\n                atEnd.lastIndex = pos + 1;\n                atEnd.test(css);\n                if (atEnd.lastIndex === 0) {\n                    next = css.length - 1;\n                } else {\n                    next = atEnd.lastIndex - 2;\n                }\n                tokens.push(['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset, pos]);\n                pos = next;\n                break;\n\n            case backslash:\n                next = pos;\n                escape = true;\n                while (css.charCodeAt(next + 1) === backslash) {\n                    next += 1;\n                    escape = !escape;\n                }\n                code = css.charCodeAt(next + 1);\n                if (escape && code !== slash && code !== space && code !== newline && code !== tab && code !== cr && code !== feed) {\n                    next += 1;\n                }\n                tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset, pos]);\n                pos = next;\n                break;\n\n            default:\n                if (code === slash && css.charCodeAt(pos + 1) === asterisk) {\n                    next = css.indexOf('*/', pos + 2) + 1;\n                    if (next === 0) {\n                        unclosed('comment', '*/');\n                    }\n\n                    content = css.slice(pos, next + 1);\n                    lines = content.split('\\n');\n                    last = lines.length - 1;\n\n                    if (last > 0) {\n                        nextLine = line + last;\n                        nextOffset = next - lines[last].length;\n                    } else {\n                        nextLine = line;\n                        nextOffset = offset;\n                    }\n\n                    tokens.push(['comment', content, line, pos - offset, nextLine, next - nextOffset, pos]);\n\n                    offset = nextOffset;\n                    line = nextLine;\n                    pos = next;\n                } else {\n                    wordEnd.lastIndex = pos + 1;\n                    wordEnd.test(css);\n                    if (wordEnd.lastIndex === 0) {\n                        next = css.length - 1;\n                    } else {\n                        next = wordEnd.lastIndex - 2;\n                    }\n\n                    tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset, pos]);\n                    pos = next;\n                }\n\n                break;\n        }\n\n        pos++;\n    }\n\n    return tokens;\n}\nmodule.exports = exports['default'];"]}