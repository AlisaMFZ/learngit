{"version":3,"sources":["style-rewriter.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,iBAAiB,QAAQ,yBAAR,CAArB;AACA,IAAI,QAAQ,QAAQ,WAAR,EAAqB,GAArB,CAAZ;AACA,IAAI,SAAS,QAAQ,eAAR,CAAb;;AAEA,IAAI,SAAJ;AACA,IAAI,QAAQ,QAAQ,MAAR,CAAe,QAAf,EAAyB,YAAY;AAC/C,SAAO,UAAU,IAAV,EAAgB;AACrB,SAAK,IAAL,CAAU,SAAS,eAAT,CAA0B,IAA1B,EAAgC;AACxC,UAAI,CAAC,KAAK,QAAV,EAAoB;AAClB;AACA,YAAI,KAAK,IAAL,KAAc,QAAd,IAA0B,KAAK,IAAL,KAAc,OAA5C,EAAqD;AACnD,eAAK,IAAL,CAAU,eAAV;AACD;AACD;AACD;AACD,WAAK,QAAL,GAAgB,eAAe,UAAU,SAAV,EAAqB;AAClD,kBAAU,IAAV,CAAe,UAAU,QAAV,EAAoB;AACjC,cAAI,OAAO,IAAX;AACA,mBAAS,IAAT,CAAc,UAAU,CAAV,EAAa;AACzB,gBAAI,EAAE,IAAF,KAAW,QAAf,EAAyB,OAAO,CAAP;AAC1B,WAFD;AAGA,mBAAS,WAAT,CAAqB,IAArB,EAA2B,eAAe,SAAf,CAAyB;AAClD,uBAAW;AADuC,WAAzB,CAA3B;AAGD,SARD;AASD,OAVe,EAUb,OAVa,CAUL,KAAK,QAVA,EAUU,MAV1B;AAWD,KAnBD;AAoBD,GArBD;AAsBD,CAvBW,CAAZ;;AAyBA;;;;;;;;;;AAUA,OAAO,OAAP,GAAiB,UAAU,EAAV,EAAc,GAAd,EAAmB,MAAnB,EAA2B,OAA3B,EAAoC;AACnD,MAAI,MAAM,KAAK,IAAL,GAAY,MAAZ,GAAqB,IAArB,GAA4B,GAAtC;AACA,MAAI,MAAM,MAAM,GAAN,CAAU,GAAV,CAAV;AACA,MAAI,GAAJ,EAAS;AACP,WAAO,kBAAQ,OAAR,CAAgB,GAAhB,CAAP;AACD,GAFD,MAEO;AACL,QAAI,UAAU,EAAd;AACA,QAAI,OAAO,EAAX;;AAEA,QAAI,QAAQ,OAAR,YAA2B,KAA/B,EAAsC;AACpC,gBAAU,QAAQ,OAAR,CAAgB,KAAhB,EAAV;AACD,KAFD,MAEO,IAAI,QAAQ,OAAR,YAA2B,MAA/B,EAAuC;AAC5C,gBAAU,QAAQ,OAAR,CAAgB,OAAhB,IAA2B,EAArC;AACA,aAAO,QAAQ,OAAR,CAAgB,OAAvB;AACD;;AAED;AACA;AACA,QAAI,UAAU,QAAQ,OAAR,CAAgB,KAAhB,MAA2B,CAAC,CAA1C,EAA6C;AAC3C,cAAQ,IAAR,CAAa,KAAb;AACD;;AAED;AACA,QAAI,CAAC,MAAD,IAAW,QAAQ,OAAR,CAAgB,KAAhB,MAA2B,CAAC,CAA3C,EAA8C;AAC5C,cAAQ,MAAR,CAAe,QAAQ,OAAR,CAAgB,KAAhB,CAAf,EAAuC,CAAvC;AACD;;AAED;AACA,QAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,cAAQ,IAAR,CAAa,QAAQ,SAAR,EAAmB,OAAO;AACrC,cAAM;AAD+B,OAAP,EAE7B,QAAQ,OAFqB,CAAnB,CAAb;AAGD;AACD,gBAAY,EAAZ;AACA,WAAO,QAAQ,OAAR,EACJ,OADI,CACI,GADJ,EACS,IADT,EAEJ,IAFI,CAEC,UAAU,GAAV,EAAe;AACnB,YAAM,GAAN,CAAU,GAAV,EAAe,IAAI,GAAnB;AACA,aAAO,IAAI,GAAX;AACD,KALI,CAAP;AAMD;AACF,CAzCD","file":"style-rewriter-compiled.js","sourcesContent":["var postcss = require('postcss')\nvar selectorParser = require('postcss-selector-parser')\nvar cache = require('lru-cache')(100)\nvar assign = require('object-assign')\n\nvar currentId\nvar addId = postcss.plugin('add-id', function () {\n  return function (root) {\n    root.each(function rewriteSelector (node) {\n      if (!node.selector) {\n        // handle media queries\n        if (node.type === 'atrule' && node.name === 'media') {\n          node.each(rewriteSelector)\n        }\n        return\n      }\n      node.selector = selectorParser(function (selectors) {\n        selectors.each(function (selector) {\n          var node = null\n          selector.each(function (n) {\n            if (n.type !== 'pseudo') node = n\n          })\n          selector.insertAfter(node, selectorParser.attribute({\n            attribute: currentId\n          }))\n        })\n      }).process(node.selector).result\n    })\n  }\n})\n\n/**\n * Add attribute selector to css\n *\n * @param {String} id\n * @param {String} css\n * @param {Boolean} scoped\n * @param {Object} options\n * @return {Promise}\n */\n\nmodule.exports = function (id, css, scoped, options) {\n  var key = id + '!!' + scoped + '!!' + css\n  var val = cache.get(key)\n  if (val) {\n    return Promise.resolve(val)\n  } else {\n    var plugins = []\n    var opts = {}\n\n    if (options.postcss instanceof Array) {\n      plugins = options.postcss.slice()\n    } else if (options.postcss instanceof Object) {\n      plugins = options.postcss.plugins || []\n      opts = options.postcss.options\n    }\n\n    // scoped css rewrite\n    // make sure the addId plugin is only pushed once\n    if (scoped && plugins.indexOf(addId) === -1) {\n      plugins.push(addId)\n    }\n\n    // remove the addId plugin if the style block is not scoped\n    if (!scoped && plugins.indexOf(addId) !== -1) {\n      plugins.splice(plugins.indexOf(addId), 1)\n    }\n\n    // minification\n    if (process.env.NODE_ENV === 'production') {\n      plugins.push(require('cssnano')(assign({\n        safe: true\n      }, options.cssnano)))\n    }\n    currentId = id\n    return postcss(plugins)\n      .process(css, opts)\n      .then(function (res) {\n        cache.set(key, res.css)\n        return res.css\n      })\n  }\n}\n\n"]}